/*
Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/elasticdeeplearning/trainingjob-operator/pkg/apis/aitrainingjob/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AITrainingJobLister helps list AITrainingJobs.
type AITrainingJobLister interface {
	// List lists all AITrainingJobs in the indexer.
	List(selector labels.Selector) (ret []*v1.AITrainingJob, err error)
	// AITrainingJobs returns an object that can list and get AITrainingJobs.
	AITrainingJobs(namespace string) AITrainingJobNamespaceLister
	AITrainingJobListerExpansion
}

// aITrainingJobLister implements the AITrainingJobLister interface.
type aITrainingJobLister struct {
	indexer cache.Indexer
}

// NewAITrainingJobLister returns a new AITrainingJobLister.
func NewAITrainingJobLister(indexer cache.Indexer) AITrainingJobLister {
	return &aITrainingJobLister{indexer: indexer}
}

// List lists all AITrainingJobs in the indexer.
func (s *aITrainingJobLister) List(selector labels.Selector) (ret []*v1.AITrainingJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AITrainingJob))
	})
	return ret, err
}

// AITrainingJobs returns an object that can list and get AITrainingJobs.
func (s *aITrainingJobLister) AITrainingJobs(namespace string) AITrainingJobNamespaceLister {
	return aITrainingJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AITrainingJobNamespaceLister helps list and get AITrainingJobs.
type AITrainingJobNamespaceLister interface {
	// List lists all AITrainingJobs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AITrainingJob, err error)
	// Get retrieves the AITrainingJob from the indexer for a given namespace and name.
	Get(name string) (*v1.AITrainingJob, error)
	AITrainingJobNamespaceListerExpansion
}

// aITrainingJobNamespaceLister implements the AITrainingJobNamespaceLister
// interface.
type aITrainingJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AITrainingJobs in the indexer for a given namespace.
func (s aITrainingJobNamespaceLister) List(selector labels.Selector) (ret []*v1.AITrainingJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AITrainingJob))
	})
	return ret, err
}

// Get retrieves the AITrainingJob from the indexer for a given namespace and name.
func (s aITrainingJobNamespaceLister) Get(name string) (*v1.AITrainingJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("aitrainingjob"), name)
	}
	return obj.(*v1.AITrainingJob), nil
}
